// // @generated by protobuf-ts 2.9.4
// // @generated from protobuf file "process.proto" (package "luca", syntax proto3)
// // tslint:disable
// import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
// import type { IBinaryWriter } from "@protobuf-ts/runtime";
// import { WireType } from "@protobuf-ts/runtime";
// import type { BinaryReadOptions } from "@protobuf-ts/runtime";
// import type { IBinaryReader } from "@protobuf-ts/runtime";
// import { UnknownFieldHandler } from "@protobuf-ts/runtime";
// import type { PartialMessage } from "@protobuf-ts/runtime";
// import { reflectionMergePartial } from "@protobuf-ts/runtime";
// import { MessageType } from "@protobuf-ts/runtime";
// /**
//  * @generated from protobuf message luca.Resource
//  */
// export interface Resource {
//     /**
//      * @generated from protobuf field: string id = 1;
//      */
//     id: string;
//     /**
//      * @generated from protobuf field: luca.ResourceType type = 2;
//      */
//     type: ResourceType;
//     /**
//      * @generated from protobuf field: double quantity = 3;
//      */
//     quantity: number;
//     /**
//      * @generated from protobuf field: luca.ResourceQuality quality = 4;
//      */
//     quality: ResourceQuality;
// }
// /**
//  * @generated from protobuf message luca.ResourceStack
//  */
// export interface ResourceStack {
//     /**
//      * @generated from protobuf field: luca.ResourceType type = 1;
//      */
//     type: ResourceType;
//     /**
//      * @generated from protobuf field: double quantity = 2;
//      */
//     quantity: number;
//     /**
//      * @generated from protobuf field: luca.ResourceQuality quality = 3;
//      */
//     quality: ResourceQuality;
// }
// /**
//  * @generated from protobuf message luca.Condition
//  */
// export interface Condition {
//     /**
//      * @generated from protobuf field: luca.ComparisonOperator operator = 1;
//      */
//     operator: ComparisonOperator;
//     /**
//      * @generated from protobuf field: double value = 2;
//      */
//     value: number;
// }
// /**
//  * @generated from protobuf message luca.Operation
//  */
// export interface Operation {
//     /**
//      * @generated from protobuf oneof: operation_type
//      */
//     operationType: {
//         oneofKind: "id";
//         /**
//          * @generated from protobuf field: string id = 1;
//          */
//         id: string;
//     } | {
//         oneofKind: "transform";
//         /**
//          * @generated from protobuf field: luca.Operation.Transform transform = 2;
//          */
//         transform: Operation_Transform;
//     } | {
//         oneofKind: "transfer";
//         /**
//          * @generated from protobuf field: luca.Operation.Transfer transfer = 3;
//          */
//         transfer: Operation_Transfer;
//     } | {
//         oneofKind: "sense";
//         /**
//          * @generated from protobuf field: luca.Operation.Sense sense = 4;
//          */
//         sense: Operation_Sense;
//     } | {
//         oneofKind: undefined;
//     };
//     /**
//      * @generated from protobuf field: uint32 input = 5;
//      */
//     input: number;
//     /**
//      * @generated from protobuf field: uint32 energy_cost = 6;
//      */
//     energyCost: number;
// }
// /**
//  * @generated from protobuf message luca.Operation.Transform
//  */
// export interface Operation_Transform {
//     /**
//      * @generated from protobuf field: luca.ResourceStack input = 1;
//      */
//     input?: ResourceStack;
//     /**
//      * @generated from protobuf field: luca.ResourceStack output = 2;
//      */
//     output?: ResourceStack;
//     /**
//      * @generated from protobuf field: double rate = 3;
//      */
//     rate: number;
// }
// /**
//  * @generated from protobuf message luca.Operation.Transfer
//  */
// export interface Operation_Transfer {
//     /**
//      * @generated from protobuf field: luca.ResourceStack resource = 1;
//      */
//     resource?: ResourceStack;
//     /**
//      * @generated from protobuf field: luca.Direction direction = 2;
//      */
//     direction: Direction;
//     /**
//      * @generated from protobuf field: double amount = 3;
//      */
//     amount: number;
// }
// /**
//  * @generated from protobuf message luca.Operation.Sense
//  */
// export interface Operation_Sense {
//     /**
//      * @generated from protobuf field: luca.Direction direction = 1;
//      */
//     direction: Direction;
//     /**
//      * @generated from protobuf field: luca.ResourceType for_type = 2;
//      */
//     forType: ResourceType;
//     /**
//      * @generated from protobuf field: luca.ResourceType for_quality = 3;
//      */
//     forQuality: ResourceType;
//     /**
//      * @generated from protobuf field: luca.Condition condition = 4;
//      */
//     condition?: Condition;
// }
// /**
//  * @generated from protobuf message luca.Process
//  */
// export interface Process {
//     /**
//      * @generated from protobuf field: string id = 1;
//      */
//     id: string;
//     /**
//      * @generated from protobuf field: string name = 2;
//      */
//     name: string;
//     /**
//      * @generated from protobuf field: uint32 energy_cost = 3;
//      */
//     energyCost: number;
//     /**
//      * This condition can only check local resources in this cell, but no sense needed
//      *
//      * @generated from protobuf field: repeated luca.Condition conditions = 4;
//      */
//     conditions: Condition[];
//     /**
//      * @generated from protobuf field: repeated luca.Operation operations = 5;
//      */
//     operations: Operation[];
// }
// /**
//  * @generated from protobuf message luca.Position
//  */
// export interface Position {
//     /**
//      * @generated from protobuf field: int32 x = 1;
//      */
//     x: number;
//     /**
//      * @generated from protobuf field: int32 y = 2;
//      */
//     y: number;
// }
// /**
//  * @generated from protobuf message luca.ResourceList
//  */
// export interface ResourceList {
//     /**
//      * @generated from protobuf field: repeated luca.Resource resources = 1;
//      */
//     resources: Resource[];
// }
// /**
//  * @generated from protobuf message luca.GridCell
//  */
// export interface GridCell {
//     /**
//      * @generated from protobuf field: string id = 1;
//      */
//     id: string;
//     /**
//      * @generated from protobuf field: luca.Position position = 2;
//      */
//     position?: Position;
//     /**
//      * @generated from protobuf field: map<string, luca.ResourceList> resourceBuckets = 3;
//      */
//     resourceBuckets: {
//         [key: string]: ResourceList;
//     };
//     /**
//      * @generated from protobuf field: repeated luca.Process processes = 4;
//      */
//     processes: Process[];
// }
// /**
//  * @generated from protobuf enum luca.ResourceType
//  */
// export enum ResourceType {
//     /**
//      * @generated from protobuf enum value: RESOURCE_TYPE_UNSPECIFIED = 0;
//      */
//     UNSPECIFIED = 0,
//     /**
//      * @generated from protobuf enum value: RESOURCE_TYPE_ENERGY = 1;
//      */
//     ENERGY = 1,
//     /**
//      * @generated from protobuf enum value: RESOURCE_TYPE_MATTER = 2;
//      */
//     MATTER = 2,
//     /**
//      * @generated from protobuf enum value: RESOURCE_TYPE_INFORMATION = 3;
//      */
//     INFORMATION = 3
// }
// /**
//  * @generated from protobuf enum luca.ResourceQuality
//  */
// export enum ResourceQuality {
//     /**
//      * @generated from protobuf enum value: RESOURCE_QUALITY_LOW = 0;
//      */
//     LOW = 0,
//     /**
//      * @generated from protobuf enum value: RESOURCE_QUALITY_MEDIUM = 1;
//      */
//     MEDIUM = 1,
//     /**
//      * @generated from protobuf enum value: RESOURCE_QUALITY_HIGH = 2;
//      */
//     HIGH = 2
// }
// /**
//  * @generated from protobuf enum luca.Direction
//  */
// export enum Direction {
//     /**
//      * @generated from protobuf enum value: DIRECTION_UNSPECIFIED = 0;
//      */
//     UNSPECIFIED = 0,
//     /**
//      * @generated from protobuf enum value: DIRECTION_NORTH = 1;
//      */
//     NORTH = 1,
//     /**
//      * @generated from protobuf enum value: DIRECTION_EAST = 2;
//      */
//     EAST = 2,
//     /**
//      * @generated from protobuf enum value: DIRECTION_SOUTH = 3;
//      */
//     SOUTH = 3,
//     /**
//      * @generated from protobuf enum value: DIRECTION_WEST = 4;
//      */
//     WEST = 4
// }
// /**
//  * @generated from protobuf enum luca.ComparisonOperator
//  */
// export enum ComparisonOperator {
//     /**
//      * @generated from protobuf enum value: COMPARISON_OPERATOR_UNSPECIFIED = 0;
//      */
//     UNSPECIFIED = 0,
//     /**
//      * @generated from protobuf enum value: COMPARISON_OPERATOR_EQUAL = 1;
//      */
//     EQUAL = 1,
//     /**
//      * @generated from protobuf enum value: COMPARISON_OPERATOR_GREATER_THAN = 2;
//      */
//     GREATER_THAN = 2,
//     /**
//      * @generated from protobuf enum value: COMPARISON_OPERATOR_LESS_THAN = 3;
//      */
//     LESS_THAN = 3
// }
// // @generated message type with reflection information, may provide speed optimized methods
// class Resource$Type extends MessageType<Resource> {
//     constructor() {
//         super("luca.Resource", [
//             { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
//             { no: 2, name: "type", kind: "enum", T: () => ["luca.ResourceType", ResourceType, "RESOURCE_TYPE_"] },
//             { no: 3, name: "quantity", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
//             { no: 4, name: "quality", kind: "enum", T: () => ["luca.ResourceQuality", ResourceQuality, "RESOURCE_QUALITY_"] }
//         ]);
//     }
//     create(value?: PartialMessage<Resource>): Resource {
//         const message = globalThis.Object.create((this.messagePrototype!));
//         message.id = "";
//         message.type = 0;
//         message.quantity = 0;
//         message.quality = 0;
//         if (value !== undefined)
//             reflectionMergePartial<Resource>(this, message, value);
//         return message;
//     }
//     internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Resource): Resource {
//         let message = target ?? this.create(), end = reader.pos + length;
//         while (reader.pos < end) {
//             let [fieldNo, wireType] = reader.tag();
//             switch (fieldNo) {
//                 case /* string id */ 1:
//                     message.id = reader.string();
//                     break;
//                 case /* luca.ResourceType type */ 2:
//                     message.type = reader.int32();
//                     break;
//                 case /* double quantity */ 3:
//                     message.quantity = reader.double();
//                     break;
//                 case /* luca.ResourceQuality quality */ 4:
//                     message.quality = reader.int32();
//                     break;
//                 default:
//                     let u = options.readUnknownField;
//                     if (u === "throw")
//                         throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
//                     let d = reader.skip(wireType);
//                     if (u !== false)
//                         (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
//             }
//         }
//         return message;
//     }
//     internalBinaryWrite(message: Resource, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
//         /* string id = 1; */
//         if (message.id !== "")
//             writer.tag(1, WireType.LengthDelimited).string(message.id);
//         /* luca.ResourceType type = 2; */
//         if (message.type !== 0)
//             writer.tag(2, WireType.Varint).int32(message.type);
//         /* double quantity = 3; */
//         if (message.quantity !== 0)
//             writer.tag(3, WireType.Bit64).double(message.quantity);
//         /* luca.ResourceQuality quality = 4; */
//         if (message.quality !== 0)
//             writer.tag(4, WireType.Varint).int32(message.quality);
//         let u = options.writeUnknownFields;
//         if (u !== false)
//             (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
//         return writer;
//     }
// }
// /**
//  * @generated MessageType for protobuf message luca.Resource
//  */
// export const Resource = new Resource$Type();
// // @generated message type with reflection information, may provide speed optimized methods
// class ResourceStack$Type extends MessageType<ResourceStack> {
//     constructor() {
//         super("luca.ResourceStack", [
//             { no: 1, name: "type", kind: "enum", T: () => ["luca.ResourceType", ResourceType, "RESOURCE_TYPE_"] },
//             { no: 2, name: "quantity", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
//             { no: 3, name: "quality", kind: "enum", T: () => ["luca.ResourceQuality", ResourceQuality, "RESOURCE_QUALITY_"] }
//         ]);
//     }
//     create(value?: PartialMessage<ResourceStack>): ResourceStack {
//         const message = globalThis.Object.create((this.messagePrototype!));
//         message.type = 0;
//         message.quantity = 0;
//         message.quality = 0;
//         if (value !== undefined)
//             reflectionMergePartial<ResourceStack>(this, message, value);
//         return message;
//     }
//     internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResourceStack): ResourceStack {
//         let message = target ?? this.create(), end = reader.pos + length;
//         while (reader.pos < end) {
//             let [fieldNo, wireType] = reader.tag();
//             switch (fieldNo) {
//                 case /* luca.ResourceType type */ 1:
//                     message.type = reader.int32();
//                     break;
//                 case /* double quantity */ 2:
//                     message.quantity = reader.double();
//                     break;
//                 case /* luca.ResourceQuality quality */ 3:
//                     message.quality = reader.int32();
//                     break;
//                 default:
//                     let u = options.readUnknownField;
//                     if (u === "throw")
//                         throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
//                     let d = reader.skip(wireType);
//                     if (u !== false)
//                         (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
//             }
//         }
//         return message;
//     }
//     internalBinaryWrite(message: ResourceStack, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
//         /* luca.ResourceType type = 1; */
//         if (message.type !== 0)
//             writer.tag(1, WireType.Varint).int32(message.type);
//         /* double quantity = 2; */
//         if (message.quantity !== 0)
//             writer.tag(2, WireType.Bit64).double(message.quantity);
//         /* luca.ResourceQuality quality = 3; */
//         if (message.quality !== 0)
//             writer.tag(3, WireType.Varint).int32(message.quality);
//         let u = options.writeUnknownFields;
//         if (u !== false)
//             (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
//         return writer;
//     }
// }
// /**
//  * @generated MessageType for protobuf message luca.ResourceStack
//  */
// export const ResourceStack = new ResourceStack$Type();
// // @generated message type with reflection information, may provide speed optimized methods
// class Condition$Type extends MessageType<Condition> {
//     constructor() {
//         super("luca.Condition", [
//             { no: 1, name: "operator", kind: "enum", T: () => ["luca.ComparisonOperator", ComparisonOperator, "COMPARISON_OPERATOR_"] },
//             { no: 2, name: "value", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ }
//         ]);
//     }
//     create(value?: PartialMessage<Condition>): Condition {
//         const message = globalThis.Object.create((this.messagePrototype!));
//         message.operator = 0;
//         message.value = 0;
//         if (value !== undefined)
//             reflectionMergePartial<Condition>(this, message, value);
//         return message;
//     }
//     internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Condition): Condition {
//         let message = target ?? this.create(), end = reader.pos + length;
//         while (reader.pos < end) {
//             let [fieldNo, wireType] = reader.tag();
//             switch (fieldNo) {
//                 case /* luca.ComparisonOperator operator */ 1:
//                     message.operator = reader.int32();
//                     break;
//                 case /* double value */ 2:
//                     message.value = reader.double();
//                     break;
//                 default:
//                     let u = options.readUnknownField;
//                     if (u === "throw")
//                         throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
//                     let d = reader.skip(wireType);
//                     if (u !== false)
//                         (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
//             }
//         }
//         return message;
//     }
//     internalBinaryWrite(message: Condition, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
//         /* luca.ComparisonOperator operator = 1; */
//         if (message.operator !== 0)
//             writer.tag(1, WireType.Varint).int32(message.operator);
//         /* double value = 2; */
//         if (message.value !== 0)
//             writer.tag(2, WireType.Bit64).double(message.value);
//         let u = options.writeUnknownFields;
//         if (u !== false)
//             (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
//         return writer;
//     }
// }
// /**
//  * @generated MessageType for protobuf message luca.Condition
//  */
// export const Condition = new Condition$Type();
// // @generated message type with reflection information, may provide speed optimized methods
// class Operation$Type extends MessageType<Operation> {
//     constructor() {
//         super("luca.Operation", [
//             { no: 1, name: "id", kind: "scalar", oneof: "operationType", T: 9 /*ScalarType.STRING*/ },
//             { no: 2, name: "transform", kind: "message", oneof: "operationType", T: () => Operation_Transform },
//             { no: 3, name: "transfer", kind: "message", oneof: "operationType", T: () => Operation_Transfer },
//             { no: 4, name: "sense", kind: "message", oneof: "operationType", T: () => Operation_Sense },
//             { no: 5, name: "input", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
//             { no: 6, name: "energy_cost", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
//         ]);
//     }
//     create(value?: PartialMessage<Operation>): Operation {
//         const message = globalThis.Object.create((this.messagePrototype!));
//         message.operationType = { oneofKind: undefined };
//         message.input = 0;
//         message.energyCost = 0;
//         if (value !== undefined)
//             reflectionMergePartial<Operation>(this, message, value);
//         return message;
//     }
//     internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Operation): Operation {
//         let message = target ?? this.create(), end = reader.pos + length;
//         while (reader.pos < end) {
//             let [fieldNo, wireType] = reader.tag();
//             switch (fieldNo) {
//                 case /* string id */ 1:
//                     message.operationType = {
//                         oneofKind: "id",
//                         id: reader.string()
//                     };
//                     break;
//                 case /* luca.Operation.Transform transform */ 2:
//                     message.operationType = {
//                         oneofKind: "transform",
//                         transform: Operation_Transform.internalBinaryRead(reader, reader.uint32(), options, (message.operationType as any).transform)
//                     };
//                     break;
//                 case /* luca.Operation.Transfer transfer */ 3:
//                     message.operationType = {
//                         oneofKind: "transfer",
//                         transfer: Operation_Transfer.internalBinaryRead(reader, reader.uint32(), options, (message.operationType as any).transfer)
//                     };
//                     break;
//                 case /* luca.Operation.Sense sense */ 4:
//                     message.operationType = {
//                         oneofKind: "sense",
//                         sense: Operation_Sense.internalBinaryRead(reader, reader.uint32(), options, (message.operationType as any).sense)
//                     };
//                     break;
//                 case /* uint32 input */ 5:
//                     message.input = reader.uint32();
//                     break;
//                 case /* uint32 energy_cost */ 6:
//                     message.energyCost = reader.uint32();
//                     break;
//                 default:
//                     let u = options.readUnknownField;
//                     if (u === "throw")
//                         throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
//                     let d = reader.skip(wireType);
//                     if (u !== false)
//                         (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
//             }
//         }
//         return message;
//     }
//     internalBinaryWrite(message: Operation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
//         /* string id = 1; */
//         if (message.operationType.oneofKind === "id")
//             writer.tag(1, WireType.LengthDelimited).string(message.operationType.id);
//         /* luca.Operation.Transform transform = 2; */
//         if (message.operationType.oneofKind === "transform")
//             Operation_Transform.internalBinaryWrite(message.operationType.transform, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
//         /* luca.Operation.Transfer transfer = 3; */
//         if (message.operationType.oneofKind === "transfer")
//             Operation_Transfer.internalBinaryWrite(message.operationType.transfer, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
//         /* luca.Operation.Sense sense = 4; */
//         if (message.operationType.oneofKind === "sense")
//             Operation_Sense.internalBinaryWrite(message.operationType.sense, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
//         /* uint32 input = 5; */
//         if (message.input !== 0)
//             writer.tag(5, WireType.Varint).uint32(message.input);
//         /* uint32 energy_cost = 6; */
//         if (message.energyCost !== 0)
//             writer.tag(6, WireType.Varint).uint32(message.energyCost);
//         let u = options.writeUnknownFields;
//         if (u !== false)
//             (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
//         return writer;
//     }
// }
// /**
//  * @generated MessageType for protobuf message luca.Operation
//  */
// export const Operation = new Operation$Type();
// // @generated message type with reflection information, may provide speed optimized methods
// class Operation_Transform$Type extends MessageType<Operation_Transform> {
//     constructor() {
//         super("luca.Operation.Transform", [
//             { no: 1, name: "input", kind: "message", T: () => ResourceStack },
//             { no: 2, name: "output", kind: "message", T: () => ResourceStack },
//             { no: 3, name: "rate", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ }
//         ]);
//     }
//     create(value?: PartialMessage<Operation_Transform>): Operation_Transform {
//         const message = globalThis.Object.create((this.messagePrototype!));
//         message.rate = 0;
//         if (value !== undefined)
//             reflectionMergePartial<Operation_Transform>(this, message, value);
//         return message;
//     }
//     internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Operation_Transform): Operation_Transform {
//         let message = target ?? this.create(), end = reader.pos + length;
//         while (reader.pos < end) {
//             let [fieldNo, wireType] = reader.tag();
//             switch (fieldNo) {
//                 case /* luca.ResourceStack input */ 1:
//                     message.input = ResourceStack.internalBinaryRead(reader, reader.uint32(), options, message.input);
//                     break;
//                 case /* luca.ResourceStack output */ 2:
//                     message.output = ResourceStack.internalBinaryRead(reader, reader.uint32(), options, message.output);
//                     break;
//                 case /* double rate */ 3:
//                     message.rate = reader.double();
//                     break;
//                 default:
//                     let u = options.readUnknownField;
//                     if (u === "throw")
//                         throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
//                     let d = reader.skip(wireType);
//                     if (u !== false)
//                         (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
//             }
//         }
//         return message;
//     }
//     internalBinaryWrite(message: Operation_Transform, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
//         /* luca.ResourceStack input = 1; */
//         if (message.input)
//             ResourceStack.internalBinaryWrite(message.input, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
//         /* luca.ResourceStack output = 2; */
//         if (message.output)
//             ResourceStack.internalBinaryWrite(message.output, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
//         /* double rate = 3; */
//         if (message.rate !== 0)
//             writer.tag(3, WireType.Bit64).double(message.rate);
//         let u = options.writeUnknownFields;
//         if (u !== false)
//             (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
//         return writer;
//     }
// }
// /**
//  * @generated MessageType for protobuf message luca.Operation.Transform
//  */
// export const Operation_Transform = new Operation_Transform$Type();
// // @generated message type with reflection information, may provide speed optimized methods
// class Operation_Transfer$Type extends MessageType<Operation_Transfer> {
//     constructor() {
//         super("luca.Operation.Transfer", [
//             { no: 1, name: "resource", kind: "message", T: () => ResourceStack },
//             { no: 2, name: "direction", kind: "enum", T: () => ["luca.Direction", Direction, "DIRECTION_"] },
//             { no: 3, name: "amount", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ }
//         ]);
//     }
//     create(value?: PartialMessage<Operation_Transfer>): Operation_Transfer {
//         const message = globalThis.Object.create((this.messagePrototype!));
//         message.direction = 0;
//         message.amount = 0;
//         if (value !== undefined)
//             reflectionMergePartial<Operation_Transfer>(this, message, value);
//         return message;
//     }
//     internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Operation_Transfer): Operation_Transfer {
//         let message = target ?? this.create(), end = reader.pos + length;
//         while (reader.pos < end) {
//             let [fieldNo, wireType] = reader.tag();
//             switch (fieldNo) {
//                 case /* luca.ResourceStack resource */ 1:
//                     message.resource = ResourceStack.internalBinaryRead(reader, reader.uint32(), options, message.resource);
//                     break;
//                 case /* luca.Direction direction */ 2:
//                     message.direction = reader.int32();
//                     break;
//                 case /* double amount */ 3:
//                     message.amount = reader.double();
//                     break;
//                 default:
//                     let u = options.readUnknownField;
//                     if (u === "throw")
//                         throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
//                     let d = reader.skip(wireType);
//                     if (u !== false)
//                         (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
//             }
//         }
//         return message;
//     }
//     internalBinaryWrite(message: Operation_Transfer, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
//         /* luca.ResourceStack resource = 1; */
//         if (message.resource)
//             ResourceStack.internalBinaryWrite(message.resource, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
//         /* luca.Direction direction = 2; */
//         if (message.direction !== 0)
//             writer.tag(2, WireType.Varint).int32(message.direction);
//         /* double amount = 3; */
//         if (message.amount !== 0)
//             writer.tag(3, WireType.Bit64).double(message.amount);
//         let u = options.writeUnknownFields;
//         if (u !== false)
//             (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
//         return writer;
//     }
// }
// /**
//  * @generated MessageType for protobuf message luca.Operation.Transfer
//  */
// export const Operation_Transfer = new Operation_Transfer$Type();
// // @generated message type with reflection information, may provide speed optimized methods
// class Operation_Sense$Type extends MessageType<Operation_Sense> {
//     constructor() {
//         super("luca.Operation.Sense", [
//             { no: 1, name: "direction", kind: "enum", T: () => ["luca.Direction", Direction, "DIRECTION_"] },
//             { no: 2, name: "for_type", kind: "enum", T: () => ["luca.ResourceType", ResourceType, "RESOURCE_TYPE_"] },
//             { no: 3, name: "for_quality", kind: "enum", T: () => ["luca.ResourceType", ResourceType, "RESOURCE_TYPE_"] },
//             { no: 4, name: "condition", kind: "message", T: () => Condition }
//         ]);
//     }
//     create(value?: PartialMessage<Operation_Sense>): Operation_Sense {
//         const message = globalThis.Object.create((this.messagePrototype!));
//         message.direction = 0;
//         message.forType = 0;
//         message.forQuality = 0;
//         if (value !== undefined)
//             reflectionMergePartial<Operation_Sense>(this, message, value);
//         return message;
//     }
//     internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Operation_Sense): Operation_Sense {
//         let message = target ?? this.create(), end = reader.pos + length;
//         while (reader.pos < end) {
//             let [fieldNo, wireType] = reader.tag();
//             switch (fieldNo) {
//                 case /* luca.Direction direction */ 1:
//                     message.direction = reader.int32();
//                     break;
//                 case /* luca.ResourceType for_type */ 2:
//                     message.forType = reader.int32();
//                     break;
//                 case /* luca.ResourceType for_quality */ 3:
//                     message.forQuality = reader.int32();
//                     break;
//                 case /* luca.Condition condition */ 4:
//                     message.condition = Condition.internalBinaryRead(reader, reader.uint32(), options, message.condition);
//                     break;
//                 default:
//                     let u = options.readUnknownField;
//                     if (u === "throw")
//                         throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
//                     let d = reader.skip(wireType);
//                     if (u !== false)
//                         (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
//             }
//         }
//         return message;
//     }
//     internalBinaryWrite(message: Operation_Sense, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
//         /* luca.Direction direction = 1; */
//         if (message.direction !== 0)
//             writer.tag(1, WireType.Varint).int32(message.direction);
//         /* luca.ResourceType for_type = 2; */
//         if (message.forType !== 0)
//             writer.tag(2, WireType.Varint).int32(message.forType);
//         /* luca.ResourceType for_quality = 3; */
//         if (message.forQuality !== 0)
//             writer.tag(3, WireType.Varint).int32(message.forQuality);
//         /* luca.Condition condition = 4; */
//         if (message.condition)
//             Condition.internalBinaryWrite(message.condition, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
//         let u = options.writeUnknownFields;
//         if (u !== false)
//             (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
//         return writer;
//     }
// }
// /**
//  * @generated MessageType for protobuf message luca.Operation.Sense
//  */
// export const Operation_Sense = new Operation_Sense$Type();
// // @generated message type with reflection information, may provide speed optimized methods
// class Process$Type extends MessageType<Process> {
//     constructor() {
//         super("luca.Process", [
//             { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
//             { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
//             { no: 3, name: "energy_cost", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
//             { no: 4, name: "conditions", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Condition },
//             { no: 5, name: "operations", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Operation }
//         ]);
//     }
//     create(value?: PartialMessage<Process>): Process {
//         const message = globalThis.Object.create((this.messagePrototype!));
//         message.id = "";
//         message.name = "";
//         message.energyCost = 0;
//         message.conditions = [];
//         message.operations = [];
//         if (value !== undefined)
//             reflectionMergePartial<Process>(this, message, value);
//         return message;
//     }
//     internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Process): Process {
//         let message = target ?? this.create(), end = reader.pos + length;
//         while (reader.pos < end) {
//             let [fieldNo, wireType] = reader.tag();
//             switch (fieldNo) {
//                 case /* string id */ 1:
//                     message.id = reader.string();
//                     break;
//                 case /* string name */ 2:
//                     message.name = reader.string();
//                     break;
//                 case /* uint32 energy_cost */ 3:
//                     message.energyCost = reader.uint32();
//                     break;
//                 case /* repeated luca.Condition conditions */ 4:
//                     message.conditions.push(Condition.internalBinaryRead(reader, reader.uint32(), options));
//                     break;
//                 case /* repeated luca.Operation operations */ 5:
//                     message.operations.push(Operation.internalBinaryRead(reader, reader.uint32(), options));
//                     break;
//                 default:
//                     let u = options.readUnknownField;
//                     if (u === "throw")
//                         throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
//                     let d = reader.skip(wireType);
//                     if (u !== false)
//                         (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
//             }
//         }
//         return message;
//     }
//     internalBinaryWrite(message: Process, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
//         /* string id = 1; */
//         if (message.id !== "")
//             writer.tag(1, WireType.LengthDelimited).string(message.id);
//         /* string name = 2; */
//         if (message.name !== "")
//             writer.tag(2, WireType.LengthDelimited).string(message.name);
//         /* uint32 energy_cost = 3; */
//         if (message.energyCost !== 0)
//             writer.tag(3, WireType.Varint).uint32(message.energyCost);
//         /* repeated luca.Condition conditions = 4; */
//         for (let i = 0; i < message.conditions.length; i++)
//             Condition.internalBinaryWrite(message.conditions[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
//         /* repeated luca.Operation operations = 5; */
//         for (let i = 0; i < message.operations.length; i++)
//             Operation.internalBinaryWrite(message.operations[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
//         let u = options.writeUnknownFields;
//         if (u !== false)
//             (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
//         return writer;
//     }
// }
// /**
//  * @generated MessageType for protobuf message luca.Process
//  */
// export const Process = new Process$Type();
// // @generated message type with reflection information, may provide speed optimized methods
// class Position$Type extends MessageType<Position> {
//     constructor() {
//         super("luca.Position", [
//             { no: 1, name: "x", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
//             { no: 2, name: "y", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
//         ]);
//     }
//     create(value?: PartialMessage<Position>): Position {
//         const message = globalThis.Object.create((this.messagePrototype!));
//         message.x = 0;
//         message.y = 0;
//         if (value !== undefined)
//             reflectionMergePartial<Position>(this, message, value);
//         return message;
//     }
//     internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Position): Position {
//         let message = target ?? this.create(), end = reader.pos + length;
//         while (reader.pos < end) {
//             let [fieldNo, wireType] = reader.tag();
//             switch (fieldNo) {
//                 case /* int32 x */ 1:
//                     message.x = reader.int32();
//                     break;
//                 case /* int32 y */ 2:
//                     message.y = reader.int32();
//                     break;
//                 default:
//                     let u = options.readUnknownField;
//                     if (u === "throw")
//                         throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
//                     let d = reader.skip(wireType);
//                     if (u !== false)
//                         (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
//             }
//         }
//         return message;
//     }
//     internalBinaryWrite(message: Position, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
//         /* int32 x = 1; */
//         if (message.x !== 0)
//             writer.tag(1, WireType.Varint).int32(message.x);
//         /* int32 y = 2; */
//         if (message.y !== 0)
//             writer.tag(2, WireType.Varint).int32(message.y);
//         let u = options.writeUnknownFields;
//         if (u !== false)
//             (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
//         return writer;
//     }
// }
// /**
//  * @generated MessageType for protobuf message luca.Position
//  */
// export const Position = new Position$Type();
// // @generated message type with reflection information, may provide speed optimized methods
// class ResourceList$Type extends MessageType<ResourceList> {
//     constructor() {
//         super("luca.ResourceList", [
//             { no: 1, name: "resources", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Resource }
//         ]);
//     }
//     create(value?: PartialMessage<ResourceList>): ResourceList {
//         const message = globalThis.Object.create((this.messagePrototype!));
//         message.resources = [];
//         if (value !== undefined)
//             reflectionMergePartial<ResourceList>(this, message, value);
//         return message;
//     }
//     internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResourceList): ResourceList {
//         let message = target ?? this.create(), end = reader.pos + length;
//         while (reader.pos < end) {
//             let [fieldNo, wireType] = reader.tag();
//             switch (fieldNo) {
//                 case /* repeated luca.Resource resources */ 1:
//                     message.resources.push(Resource.internalBinaryRead(reader, reader.uint32(), options));
//                     break;
//                 default:
//                     let u = options.readUnknownField;
//                     if (u === "throw")
//                         throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
//                     let d = reader.skip(wireType);
//                     if (u !== false)
//                         (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
//             }
//         }
//         return message;
//     }
//     internalBinaryWrite(message: ResourceList, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
//         /* repeated luca.Resource resources = 1; */
//         for (let i = 0; i < message.resources.length; i++)
//             Resource.internalBinaryWrite(message.resources[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
//         let u = options.writeUnknownFields;
//         if (u !== false)
//             (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
//         return writer;
//     }
// }
// /**
//  * @generated MessageType for protobuf message luca.ResourceList
//  */
// export const ResourceList = new ResourceList$Type();
// // @generated message type with reflection information, may provide speed optimized methods
// class GridCell$Type extends MessageType<GridCell> {
//     constructor() {
//         super("luca.GridCell", [
//             { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
//             { no: 2, name: "position", kind: "message", T: () => Position },
//             { no: 3, name: "resourceBuckets", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => ResourceList } },
//             { no: 4, name: "processes", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Process }
//         ]);
//     }
//     create(value?: PartialMessage<GridCell>): GridCell {
//         const message = globalThis.Object.create((this.messagePrototype!));
//         message.id = "";
//         message.resourceBuckets = {};
//         message.processes = [];
//         if (value !== undefined)
//             reflectionMergePartial<GridCell>(this, message, value);
//         return message;
//     }
//     internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GridCell): GridCell {
//         let message = target ?? this.create(), end = reader.pos + length;
//         while (reader.pos < end) {
//             let [fieldNo, wireType] = reader.tag();
//             switch (fieldNo) {
//                 case /* string id */ 1:
//                     message.id = reader.string();
//                     break;
//                 case /* luca.Position position */ 2:
//                     message.position = Position.internalBinaryRead(reader, reader.uint32(), options, message.position);
//                     break;
//                 case /* map<string, luca.ResourceList> resourceBuckets */ 3:
//                     this.binaryReadMap3(message.resourceBuckets, reader, options);
//                     break;
//                 case /* repeated luca.Process processes */ 4:
//                     message.processes.push(Process.internalBinaryRead(reader, reader.uint32(), options));
//                     break;
//                 default:
//                     let u = options.readUnknownField;
//                     if (u === "throw")
//                         throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
//                     let d = reader.skip(wireType);
//                     if (u !== false)
//                         (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
//             }
//         }
//         return message;
//     }
//     private binaryReadMap3(map: GridCell["resourceBuckets"], reader: IBinaryReader, options: BinaryReadOptions): void {
//         let len = reader.uint32(), end = reader.pos + len, key: keyof GridCell["resourceBuckets"] | undefined, val: GridCell["resourceBuckets"][any] | undefined;
//         while (reader.pos < end) {
//             let [fieldNo, wireType] = reader.tag();
//             switch (fieldNo) {
//                 case 1:
//                     key = reader.string();
//                     break;
//                 case 2:
//                     val = ResourceList.internalBinaryRead(reader, reader.uint32(), options);
//                     break;
//                 default: throw new globalThis.Error("unknown map entry field for field luca.GridCell.resourceBuckets");
//             }
//         }
//         map[key ?? ""] = val ?? ResourceList.create();
//     }
//     internalBinaryWrite(message: GridCell, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
//         /* string id = 1; */
//         if (message.id !== "")
//             writer.tag(1, WireType.LengthDelimited).string(message.id);
//         /* luca.Position position = 2; */
//         if (message.position)
//             Position.internalBinaryWrite(message.position, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
//         /* map<string, luca.ResourceList> resourceBuckets = 3; */
//         for (let k of globalThis.Object.keys(message.resourceBuckets)) {
//             writer.tag(3, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
//             writer.tag(2, WireType.LengthDelimited).fork();
//             ResourceList.internalBinaryWrite(message.resourceBuckets[k], writer, options);
//             writer.join().join();
//         }
//         /* repeated luca.Process processes = 4; */
//         for (let i = 0; i < message.processes.length; i++)
//             Process.internalBinaryWrite(message.processes[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
//         let u = options.writeUnknownFields;
//         if (u !== false)
//             (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
//         return writer;
//     }
// }
// /**
//  * @generated MessageType for protobuf message luca.GridCell
//  */
// export const GridCell = new GridCell$Type();
